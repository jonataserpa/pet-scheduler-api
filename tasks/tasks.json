{
  "metadata": {
    "projectName": "Pet Scheduler API",
    "version": "1.0.0",
    "createdAt": "2025-04-18T19:00:00.000Z",
    "description": "API para gerenciamento de agendamentos de serviços de banho e tosa para pets em petshops e clínicas veterinárias."
  },
  "tasks": [
    {
      "id": 1,
      "title": "Configuração do Ambiente de Desenvolvimento",
      "description": "Configurar o ambiente de desenvolvimento com Docker, TypeScript e ferramentas necessárias conforme ADR-001.",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "Implementar a configuração inicial do ambiente de desenvolvimento seguindo as especificações do ADR-001. Isso inclui:\n\n1. Configurar Docker e Docker Compose com containers para:\n   - Node.js app\n   - PostgreSQL\n   - Redis\n   - Worker para processamento assíncrono\n   - Ambiente de testes\n\n2. Configurar TypeScript com configurações estritas\n   - Criar tsconfig.json com `strict: true`\n   - Configurar ESLint e Prettier\n\n3. Estruturar o projeto seguindo Clean Architecture e DDD:\n   - Organizar diretórios conforme especificado no PRD seção C.2\n   - Configurar scripts de build e desenvolvimento\n\n4. Implementar gestão de variáveis de ambiente:\n   - Criar .env.example com as variáveis necessárias\n   - Implementar validação das variáveis em runtime conforme ADR-003",
      "testStrategy": "1. Verificar se todos os containers Docker são iniciados corretamente com `docker-compose up`\n2. Confirmar que o ambiente de desenvolvimento permite compilar o TypeScript sem erros\n3. Testar a validação de variáveis de ambiente com valores inválidos para garantir que o sistema falhe adequadamente\n4. Verificar se a estrutura de diretórios está conforme o especificado no PRD"
    },
    {
      "id": 2,
      "title": "Implementação do Modelo de Dados e Entidades",
      "description": "Criar as entidades de domínio e seus relacionamentos usando DDD e Prisma ORM.",
      "status": "done",
      "dependencies": [1],
      "priority": "high",
      "details": "Desenvolver o modelo de dados e as entidades de domínio conforme as especificações do PRD, utilizando Domain-Driven Design (DDD) e Prisma ORM:\n\n1. Definir as entidades principais do domínio:\n   - Scheduling (Agendamento)\n   - Customer (Cliente)\n   - Pet (Animal de estimação)\n   - Service (Serviço oferecido)\n   - Notification (Notificação)\n\n2. Implementar os Value Objects para conceitos imutáveis:\n   - Endereço\n   - Contato\n   - Período de tempo\n\n3. Configurar o Prisma Schema com:\n   - Modelos para todas as entidades\n   - Relacionamentos entre entidades\n   - Índices únicos (especialmente para date/time em Scheduling)\n   - Constraints e validações no nível do banco de dados\n\n4. Criar as migrations iniciais do banco de dados\n\n5. Implementar validações das entidades no domínio (regras de negócio)",
      "testStrategy": "1. Testes unitários para validar regras de domínio nas entidades\n2. Testes de integração para verificar se o Prisma ORM está mapeando corretamente as entidades\n3. Verificar se as migrations são aplicadas corretamente\n4. Testar os índices únicos para garantir que não haja conflitos de agendamento"
    },
    {
      "id": 3,
      "title": "Implementação de Autenticação e Autorização",
      "description": "Criar o sistema de autenticação e autorização utilizando JWT conforme ADR-002.",
      "status": "pending",
      "dependencies": [1],
      "priority": "high",
      "details": "Desenvolver o sistema de autenticação e autorização utilizando JWT (JSON Web Token) conforme especificado no ADR-002:\n\n1. Criar entidade de User/Admin no domínio\n   - Implementar model no Prisma\n   - Definir roles e permissões\n\n2. Implementar serviço de autenticação:\n   - Login com email/senha\n   - Geração de tokens JWT\n   - Refresh token\n   - Armazenamento seguro de senhas (bcrypt)\n\n3. Criar middlewares de autorização:\n   - Verificação de token JWT\n   - Validação de roles/permissões\n   - Proteção de rotas específicas\n\n4. Implementar logout e gestão de sessões:\n   - Invalidação de tokens\n   - Lista negra de tokens (usando Redis)\n\n5. Criar endpoints de autenticação:\n   - POST /login\n   - POST /refresh-token\n   - POST /logout",
      "testStrategy": "1. Testes unitários para serviços de autenticação\n2. Testes de integração para endpoints de login/logout\n3. Testar edge cases como tokens expirados, inválidos ou falsificados\n4. Verificar se as rotas protegidas realmente exigem autenticação\n5. Testar diferentes níveis de permissão/roles"
    },
    {
      "id": 4,
      "title": "Implementação de Repositórios",
      "description": "Criar os repositórios para todas as entidades usando o padrão Repository com Prisma ORM.",
      "status": "pending",
      "dependencies": [2],
      "priority": "high",
      "details": "Implementar os repositórios para todas as entidades do domínio usando o padrão Repository com Prisma ORM conforme especificado no PRD:\n\n1. Definir interfaces de repositório na camada de domínio:\n   - ISchedulingRepository\n   - ICustomerRepository\n   - IPetRepository\n   - IServiceRepository\n   - INotificationRepository\n\n2. Implementar as classes concretas de repositório na camada de infraestrutura:\n   - PrismaSchedulingRepository\n   - PrismaCustomerRepository\n   - PrismaPetRepository\n   - PrismaServiceRepository\n   - PrismaNotificationRepository\n\n3. Implementar transações usando Prisma:\n   - Função de wrapper para transações\n   - Garantir consistência em operações complexas\n\n4. Adicionar índices e otimizações para consultas frequentes\n\n5. Implementar testes de integração para cada repositório",
      "testStrategy": "1. Testes unitários para verificar se as interfaces são respeitadas\n2. Testes de integração para cada operação CRUD nos repositórios\n3. Testes de transações para garantir atomicidade\n4. Testes de performance para consultas frequentes\n5. Verificar se os repositórios aplicam corretamente as regras de negócio"
    },
    {
      "id": 5,
      "title": "Implementação dos Casos de Uso de Agendamento",
      "description": "Implementar os casos de uso relacionados ao agendamento de serviços para pets.",
      "status": "pending",
      "dependencies": [2, 4],
      "priority": "high",
      "details": "Desenvolver os casos de uso relacionados ao agendamento de serviços para pets, implementando as regras de negócio conforme especificado no PRD:\n\n1. Implementar casos de uso para Agendamento:\n   - CreateSchedulingUseCase\n   - UpdateSchedulingUseCase\n   - CancelSchedulingUseCase\n   - ListSchedulingsUseCase\n   - GetSchedulingByIdUseCase\n   - CheckAvailabilityUseCase\n\n2. Implementar regras de negócio de agendamento:\n   - Validação de disponibilidade de horário\n   - Regra de antecedência mínima de 7 dias\n   - Validação de conflitos\n   - Respeito a feriados e horários de funcionamento\n\n3. Implementar cálculo de preço baseado em serviços selecionados:\n   - Lógica para combos e descontos\n   - Cálculo do preço total\n\n4. Adicionar validações específicas para o pet:\n   - Verificação de restrições (porte grande, alergias)\n   - Requisitos especiais do pet\n\n5. Implementar disparos de notificações após eventos de agendamento",
      "testStrategy": "1. Testes unitários para cada caso de uso\n2. Testes de integração para fluxos completos de agendamento\n3. Testes para cenários de borda (conflitos, restrições)\n4. Verificar se as regras de cálculo de preço estão funcionando corretamente\n5. Testar cenários de falha e validação"
    },
    {
      "id": 6,
      "title": "Implementação dos Casos de Uso de Cliente e Pet",
      "description": "Implementar os casos de uso relacionados ao cadastro e gestão de clientes e pets.",
      "status": "pending",
      "dependencies": [2, 4],
      "priority": "medium",
      "details": "Desenvolver os casos de uso relacionados ao cadastro e gestão de clientes e seus pets:\n\n1. Implementar casos de uso para Cliente:\n   - CreateCustomerUseCase\n   - UpdateCustomerUseCase\n   - DeleteCustomerUseCase\n   - ListCustomersUseCase\n   - GetCustomerByIdUseCase\n   - SearchCustomersUseCase\n\n2. Implementar casos de uso para Pet:\n   - AddPetToCustomerUseCase\n   - UpdatePetUseCase\n   - RemovePetUseCase\n   - ListPetsByCustomerUseCase\n   - GetPetByIdUseCase\n\n3. Implementar regras de negócio para cliente/pet:\n   - Validação de dados cadastrais\n   - Restrições de cadastro para pets de porte grande ou com alergias\n   - Validação de histórico de agendamento\n\n4. Integrar com sistema de agendamento para manter consistência",
      "testStrategy": "1. Testes unitários para cada caso de uso\n2. Testes de integração para fluxos completos de cadastro\n3. Testes para validações e restrições específicas\n4. Verificar integridade referencial entre cliente e pets\n5. Testar cenários de atualização e exclusão"
    }
  ]
}
